---
blueprint:
  name: Zendure SolarFlow MQTT Bridge (Einfach)
  description: >-
    Wandelt MQTT-Daten von einem Zendure SolarFlow Hub in eine saubere,
    strukturierte Topic-Hierarchie um. Fragt den Gerätestatus einmalig
    beim Start von Home Assistant ab.
    Ersetzt externe Python-Skripte für diese Aufgabe.
  domain: automation
  source_url: https://github.com/ricariel/home-assistant-blueprints/blob/main/blueprints/automation/ricariel/solarflow-mqtt-bridge.yaml

  input:
    sf_device_id:
      name: SolarFlow Geräte-ID
      description: Die eindeutige MQTT-Geräte-ID deines SolarFlow Hubs.
      selector:
        text:

    sf_product_id:
      name: SolarFlow Produkt-ID
      description: Die Produkt-ID des SolarFlow-Systems. Der Standardwert muss normalerweise nicht geändert werden.
      default: "73bkTV"

    retain_flag:
      name: Retain Flag
      description: Gibt an, ob die veröffentlichten MQTT-Nachrichten auf dem Broker gespeichert werden sollen (empfohlen).
      selector:
        boolean:
      default: true

# Ab hier beginnt die eigentliche Automations-Logik
mode: parallel
max: 10

trigger:
  # Trigger 1: Reagiert auf eingehende Daten vom SolarFlow-Hub
  - platform: mqtt
    topic: "/!input sf_product_id/!input sf_device_id/properties/report"
    id: "solarflow_report"

  # Trigger 2: Wird einmalig ausgeführt, wenn Home Assistant startet
  - platform: homeassistant
    event: start
    id: "initial_poll"

action:
  - choose:
      # Fall 1: Sende eine einmalige Abfrage beim Start von Home Assistant
      - conditions:
          - condition: trigger
            id: "initial_poll"
        sequence:
          - service: mqtt.publish
            data:
              topic: "iot/!input sf_product_id/!input sf_device_id/properties/read"
              payload: '{"properties": ["getAll"]}'

      # Fall 2: Verarbeite eingehende Daten vom SolarFlow-Hub
      - conditions:
          - condition: trigger
            id: "solarflow_report"
        sequence:
          - variables:
              payload: "{{ trigger.payload_json }}"
              device_id: !input sf_device_id

          # Verarbeite die allgemeinen "properties"
          - if: "{{ payload.properties is defined }}"
            then:
              - repeat:
                  for_each: "{{ payload.properties.items() }}"
                  sequence:
                    - service: mqtt.publish
                      data:
                        topic: "solarflow-hub/{{ device_id }}/telemetry/{{ repeat.item.key }}"
                        payload: "{{ repeat.item.value }}"
                        retain: !input retain_flag

          # Verarbeite die "packData" der Akkus
          - if: "{{ payload.packData is defined and payload.packData | count > 0 }}"
            then:
              - repeat:
                  for_each: "{{ payload.packData }}"
                  sequence:
                    - variables:
                        battery_sn: "{{ repeat.item.sn }}"
                    - repeat:
                        for_each: "{{ repeat.item.items() }}"
                        sequence:
                          - if: "{{ repeat.item.key != 'sn' }}"
                            then:
                              - service: mqtt.publish
                                data:
                                  topic: "solarflow-hub/{{ device_id }}/telemetry/batteries/{{ battery_sn }}/{{ repeat.item.key }}"
                                  payload: "{{ repeat.item.value }}"
                                  retain: !input retain_flag
